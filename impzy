#!/bin/bash
### MIT License Copyright (c) 2024 Hecdin Farias.

set -o errexit
set -o nounset
set -o pipefail

### Colores
gray="\e[2m"
bold="\e[1m"
end="\e[0m"

### Variables globales
OPTION_INPUT=${1:-.}
PATH_INPUT=${2:-.}
INDEX_FILE="index.jsx"
ELEM_NAME=()
COUNTER=0

### Función para verificar si un comando está instalado
function check_command() {
  if ! command -v "$1" &> /dev/null; then
    echo -e " \"$1\" is not installed. Install it to continue. \n"
    return 1
  else
    return 0
  fi
}

### Verificar si fd y ripgrep estan instalados
check_command "fd"
fd_installed=$?

if [ $fd_installed -eq 0 ]; then
  echo -e " ${bold}Initializing...${end}"
else
  exit
fi

### Mostrar ayuda
function show_help() {
  cat << EOF

  Usage:
    impzy [Options] [Arguments]

  Arguments:
    directory      Specify a directory (this is a required argument).

  Options:
    -p, --parse    Examine the specified directory and return an index.jsx file.
    -h, --help     Display this help message and exit.
    -v, --version  Display the version of the program and exit.

EOF
}

### Crear o limpiar el archivo "index.jsx"
function initialize_index_file() {
  > "$INDEX_FILE"
}

### Procesar los archivos JSX y generar las importaciones
function process_jsx_files() {
  # Buscar todos los archivos .jsx en el directorio actual y sus subdirectorios
  local find_files=$(fd --full-path "$PATH_INPUT" -e "jsx")

  for file in $find_files; do
    if [ -s "$file" ]; then
      # Formatear la ruta del archivo
      local unpathed_file=$(echo "$file" | sed 's/^\.\///;s/\.jsx$//')

      # Extraer el nombre del archivo sin la extensión
      local file_name=$(basename "$file" .jsx)

      # Ignorar los archivoz vacios o con el nombre "index"
      local matches=$(grep -oP "export\s+const\s+\K\w+" "$file")
      if [[ "$file_name" == "index" || -z "$matches" || -z "${matches// }" ]]; then
        continue
      fi

      local match_found+=("$matches")
      local array_matches=(${matches})
      echo -e " ${gray}* $file${end}"

      # Añadir los datos a "index.jsx"
      if [ ${#array_matches[@]} -gt 1 ]; then
        local add_to_index=()

        for elem in "${array_matches[@]}"; do
          add_to_index+=("$elem,")
          ((COUNTER+=1))
        done

        ELEM_NAME+=("${add_to_index[*]}")
        echo "import { ${add_to_index[*]} } from './${unpathed_file}.jsx';" >> "$INDEX_FILE"
      else
        ELEM_NAME+=("${match_found[*]},")
        echo "import { ${match_found[*]} } from './${unpathed_file}.jsx';" >> "$INDEX_FILE"
        ((COUNTER+=1))
      fi
      match_found=()
    fi
  done

  echo -e " ${bold}Number of imported elements:${end} ${gray}${COUNTER}${end}\n"
}

### Agregar la exportación al final del archivo de "index.jsx"
function finalize_index_file() {
  echo " " >> "$INDEX_FILE"
  echo "export {" >> "$INDEX_FILE"
  for elem in "${ELEM_NAME[@]}"; do
    echo "  $elem" >> "$INDEX_FILE"
  done
  echo "}" >> "$INDEX_FILE"
}

### Ejecutar el script
function main() {
  if ! [ -d "$PATH_INPUT" ]; then
    echo -e " Invalid directory. \n"
  else
    initialize_index_file
    process_jsx_files
    if [ ${COUNTER} -gt 0 ]; then
      finalize_index_file
      exit
    fi
    if [ $(wc -c < $INDEX_FILE) -eq 0 ]; then
      rm -rf $INDEX_FILE
    fi
  fi
}

### Opciones
case "${OPTION_INPUT}" in
  --help|-h)
    show_help
    ;;
  --version|-v)
    echo "v1.1.3"
    ;;
  --parse|-p)
    main
    ;;
  *)
    echo -e " Invalid option. \n"
    ;;
esac
